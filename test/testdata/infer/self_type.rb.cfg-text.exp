method ::Object#rnd {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: Object = cast(<self>: NilClass, Object);
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$7: T.class_of(Parent) = alias <C Parent>
    keep_for_ide$6: T.class_of(Parent) = <cfgAlias>$7
    keep_for_ide$6: T.untyped = <keep-alive> keep_for_ide$6
    <cfgAlias>$12: T.class_of(Normal) = alias <C Normal>
    keep_for_ide$11: T.class_of(Normal) = <cfgAlias>$12
    keep_for_ide$11: T.untyped = <keep-alive> keep_for_ide$11
    <cfgAlias>$15: T.class_of(Parent) = alias <C Parent>
    keep_for_ide$14: T.class_of(Parent) = <cfgAlias>$15
    keep_for_ide$14: T.untyped = <keep-alive> keep_for_ide$14
    <cfgAlias>$20: T.class_of(Generic) = alias <C Generic>
    keep_for_ide$19: T.class_of(Generic) = <cfgAlias>$20
    keep_for_ide$19: T.untyped = <keep-alive> keep_for_ide$19
    <cfgAlias>$23: T.class_of(Parent) = alias <C Parent>
    keep_for_ide$22: T.class_of(Parent) = <cfgAlias>$23
    keep_for_ide$22: T.untyped = <keep-alive> keep_for_ide$22
    <cfgAlias>$26: T.class_of(Normal) = alias <C Normal>
    keep_for_ide$25: T.class_of(Normal) = <cfgAlias>$26
    keep_for_ide$25: T.untyped = <keep-alive> keep_for_ide$25
    <cfgAlias>$30: T.class_of(Normal) = alias <C Normal>
    <statTemp>$28: Normal = <cfgAlias>$30: T.class_of(Normal).new()
    <castTemp>$27: Normal = <statTemp>$28: Normal.returns_self()
    <statTemp>$24: Normal = cast(<castTemp>$27: Normal, Normal);
    <cfgAlias>$34: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$36: T.class_of(String) = alias <C String>
    keep_for_ide$32: Runtime object representing type: Generic[String] = <cfgAlias>$34: T.class_of(Generic).[](<cfgAlias>$36: T.class_of(String))
    keep_for_ide$32: T.untyped = <keep-alive> keep_for_ide$32
    <cfgAlias>$41: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$43: T.class_of(String) = alias <C String>
    <statTemp>$39: Runtime object representing type: Generic[String] = <cfgAlias>$41: T.class_of(Generic).[](<cfgAlias>$43: T.class_of(String))
    <statTemp>$38: Generic[String] = <statTemp>$39: Runtime object representing type: Generic[String].new()
    <castTemp>$37: Generic[String] = <statTemp>$38: Generic[String].returns_self()
    <statTemp>$31: Generic[String] = cast(<castTemp>$37: Generic[String], Generic[String]);
    <cfgAlias>$48: T.class_of(B) = alias <C B>
    keep_for_ide$47: T.class_of(B) = <cfgAlias>$48
    keep_for_ide$47: T.untyped = <keep-alive> keep_for_ide$47
    <cfgAlias>$52: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$54: T.class_of(String) = alias <C String>
    <statTemp>$50: Runtime object representing type: Generic[String] = <cfgAlias>$52: T.class_of(Generic).[](<cfgAlias>$54: T.class_of(String))
    a: Generic[String] = <statTemp>$50: Runtime object representing type: Generic[String].new()
    <cfgAlias>$59: T.class_of(B) = alias <C B>
    <ifTemp>$56: T::Boolean = a: Generic[String].is_a?(<cfgAlias>$59: T.class_of(B))
    <ifTemp>$56 -> (T::Boolean ? bb2 : bb4)

# backedges
# - bb7(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb2[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), a: T.all(Generic[String], B)):
    <cfgAlias>$62: T.class_of(T) = alias <C T>
    <cfgAlias>$65: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$67: T.class_of(String) = alias <C String>
    <statTemp>$63: Runtime object representing type: Generic[String] = <cfgAlias>$65: T.class_of(Generic).[](<cfgAlias>$67: T.class_of(String))
    <cfgAlias>$69: T.class_of(B) = alias <C B>
    keep_for_ide$60: Runtime object representing type: T.all(Generic[String], B) = <cfgAlias>$62: T.class_of(T).all(<statTemp>$63: Runtime object representing type: Generic[String], <cfgAlias>$69: T.class_of(B))
    keep_for_ide$60: T.untyped = <keep-alive> keep_for_ide$60
    <castTemp>$70: T.all(Generic[String], B) = a: T.all(Generic[String], B).returns_self()
    <statTemp>$55: T.all(Generic[String], B) = cast(<castTemp>$70: T.all(Generic[String], B), T.all(Generic[String], B));
    <unconditional> -> bb4

# backedges
# - bb0(rubyRegionId=0)
# - bb2(rubyRegionId=0)
bb4[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>)):
    <cfgAlias>$76: T.class_of(Array) = alias <C Array>
    keep_for_ide$75: T.class_of(Array) = <cfgAlias>$76
    keep_for_ide$75: T.untyped = <keep-alive> keep_for_ide$75
    <cfgAlias>$80: T.class_of(Integer) = alias <C Integer>
    <cfgAlias>$82: T.class_of(Integer) = alias <C Integer>
    <magic>$83: T.class_of(<Magic>) = alias <C <Magic>>
    keep_for_ide$78: [T.class_of(Integer), T.class_of(Integer)] = <magic>$83: T.class_of(<Magic>).<build-array>(<cfgAlias>$80: T.class_of(Integer), <cfgAlias>$82: T.class_of(Integer))
    keep_for_ide$78: T.untyped = <keep-alive> keep_for_ide$78
    <arrayTemp>$86: Integer(1) = 1
    <arrayTemp>$87: Integer(2) = 2
    <magic>$88: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$85: [Integer(1), Integer(2)] = <magic>$88: T.class_of(<Magic>).<build-array>(<arrayTemp>$86: Integer(1), <arrayTemp>$87: Integer(2))
    <castTemp>$84: [Integer(1), Integer(2)] = <statTemp>$85: [Integer(1), Integer(2)].returns_self()
    <statTemp>$77: [Integer, Integer] = cast(<castTemp>$84: [Integer(1), Integer(2)], [Integer, Integer]);
    <cfgAlias>$93: T.class_of(A) = alias <C A>
    keep_for_ide$92: T.class_of(A) = <cfgAlias>$93
    keep_for_ide$92: T.untyped = <keep-alive> keep_for_ide$92
    <cfgAlias>$98: T.class_of(B) = alias <C B>
    keep_for_ide$97: T.class_of(B) = <cfgAlias>$98
    keep_for_ide$97: T.untyped = <keep-alive> keep_for_ide$97
    <cfgAlias>$101: T.class_of(A) = alias <C A>
    s: A = <cfgAlias>$101: T.class_of(A).new()
    <unconditional> -> bb5

# backedges
# - bb4(rubyRegionId=0)
# - bb8(rubyRegionId=0)
# - bb9(rubyRegionId=0)
bb5[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), s: A):
    # outerLoops: 1
    <whileTemp>$104: T.untyped = <self>: T.class_of(<root>).rnd()
    <whileTemp>$104 -> (T.untyped ? bb8 : bb7)

# backedges
# - bb5(rubyRegionId=0)
bb7[rubyRegionId=0, firstDead=2](<self>: T.class_of(<root>), s: A):
    <statTemp>$112: NilClass = <self>: T.class_of(<root>).puts(s: A)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb5(rubyRegionId=0)
bb8[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), s: A):
    # outerLoops: 1
    <cfgAlias>$110: T.class_of(B) = alias <C B>
    <ifTemp>$107: T::Boolean = s: A.is_a?(<cfgAlias>$110: T.class_of(B))
    <ifTemp>$107 -> (T::Boolean ? bb9 : bb5)

# backedges
# - bb8(rubyRegionId=0)
bb9[rubyRegionId=0, firstDead=-1](<self>: T.class_of(<root>), s: T.all(A, B)):
    # outerLoops: 1
    <statTemp>$111: T.all(A, B) = s
    s: T.all(A, B) = <statTemp>$111: T.all(A, B).returns_self()
    <unconditional> -> bb5

}

method ::Parent#returns_self {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: Parent = cast(<self>: NilClass, Parent);
    <returnMethodTemp>$2: Parent = <self>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Parent
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Parent>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(Parent) = cast(<self>: NilClass, T.class_of(Parent));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Parent))
    <selfRestore>$8: T.class_of(Parent) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(Parent), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Parent)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Parent)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(Parent) = <selfRestore>$8
    <cfgAlias>$19: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$21: T.class_of(T) = alias <C T>
    <statTemp>$16: T.class_of(Parent) = <self>: T.class_of(Parent).extend(<cfgAlias>$19: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=5](<self>: T.class_of(Parent), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Parent)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$14: T.class_of(T) = alias <C T>
    <statTemp>$12: Runtime object representing type: T.untyped = <cfgAlias>$14: T.class_of(T).self_type()
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<statTemp>$12: Runtime object representing type: T.untyped)
    <blockReturnTemp>$15: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

method ::<Class:Normal>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(Normal) = cast(<self>: NilClass, T.class_of(Normal));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Generic#bad {

bb0[rubyRegionId=0, firstDead=7]():
    <self>: Generic[Generic::TM] = cast(<self>: NilClass, Generic[Generic::TM]);
    <cfgAlias>$5: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$8: T.class_of(T) = alias <C T>
    <statTemp>$6: Runtime object representing type: T.untyped = <cfgAlias>$8: T.class_of(T).untyped()
    <statTemp>$3: Runtime object representing type: Generic[T.untyped] = <cfgAlias>$5: T.class_of(Generic).[](<statTemp>$6: Runtime object representing type: T.untyped)
    <returnMethodTemp>$2: Generic[T.untyped] = <statTemp>$3: Runtime object representing type: Generic[T.untyped].new()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Generic[T.untyped]
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Generic>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <C TM>$26: Runtime object representing type: Generic::TM = alias <C TM>
    <self>: T.class_of(Generic) = cast(<self>: NilClass, T.class_of(Generic));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Generic))
    <selfRestore>$8: T.class_of(Generic) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(Generic), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Generic)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=7](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Generic)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(Generic) = <selfRestore>$8
    <cfgAlias>$22: T.class_of(T::Generic) = alias <C Generic>
    <cfgAlias>$24: T.class_of(T) = alias <C T>
    <statTemp>$19: T.class_of(Generic) = <self>: T.class_of(Generic).extend(<cfgAlias>$22: T.class_of(T::Generic))
    <C TM>$26: T::Types::TypeMember = <self>: T.class_of(Generic).type_member()
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=7](<self>: T.class_of(Generic), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Generic)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$14: T.class_of(Generic) = alias <C Generic>
    <cfgAlias>$17: T.class_of(T) = alias <C T>
    <statTemp>$15: Runtime object representing type: T.untyped = <cfgAlias>$17: T.class_of(T).self_type()
    <statTemp>$12: Runtime object representing type: Generic[T.untyped] = <cfgAlias>$14: T.class_of(Generic).[](<statTemp>$15: Runtime object representing type: T.untyped)
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<statTemp>$12: Runtime object representing type: Generic[T.untyped])
    <blockReturnTemp>$18: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

method ::<Class:B>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(B) = cast(<self>: NilClass, T.class_of(B));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Array#returns_self {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T::Array[Array::Elem] = cast(<self>: NilClass, T::Array[Array::Elem]);
    <returnMethodTemp>$2: T::Array[Array::Elem] = <self>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T::Array[Array::Elem]
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Array>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(Array) = cast(<self>: NilClass, T.class_of(Array));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(Array))
    <selfRestore>$8: T.class_of(Array) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(Array), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Array)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Array)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(Array) = <selfRestore>$8
    <cfgAlias>$19: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$21: T.class_of(T) = alias <C T>
    <statTemp>$16: T.class_of(Array) = <self>: T.class_of(Array).extend(<cfgAlias>$19: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=5](<self>: T.class_of(Array), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(Array)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$14: T.class_of(T) = alias <C T>
    <statTemp>$12: Runtime object representing type: T.untyped = <cfgAlias>$14: T.class_of(T).self_type()
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<statTemp>$12: Runtime object representing type: T.untyped)
    <blockReturnTemp>$15: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

method ::<Class:A>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::B#returns_self {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: B = cast(<self>: NilClass, B);
    <returnMethodTemp>$2: B = <self>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: B
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:B>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(B) = cast(<self>: NilClass, T.class_of(B));
    <cfgAlias>$5: T.class_of(Sorbet::Private::Static) = alias <C Static>
    <block-pre-call-temp>$7: Sorbet::Private::Static::Void = <cfgAlias>$5: T.class_of(Sorbet::Private::Static).sig(<self>: T.class_of(B))
    <selfRestore>$8: T.class_of(B) = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: T.class_of(B), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(B)):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=6](<block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(B)):
    <statTemp>$3: Sorbet::Private::Static::Void = Solve<<block-pre-call-temp>$7, sig>
    <self>: T.class_of(B) = <selfRestore>$8
    <cfgAlias>$19: T.class_of(T::Sig) = alias <C Sig>
    <cfgAlias>$21: T.class_of(T) = alias <C T>
    <statTemp>$16: T.class_of(B) = <self>: T.class_of(B).extend(<cfgAlias>$19: T.class_of(T::Sig))
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=5](<self>: T.class_of(B), <block-pre-call-temp>$7: Sorbet::Private::Static::Void, <selfRestore>$8: T.class_of(B)):
    # outerLoops: 1
    <self>: T::Private::Methods::DeclBuilder = loadSelf(sig)
    <cfgAlias>$14: T.class_of(T) = alias <C T>
    <statTemp>$12: Runtime object representing type: T.untyped = <cfgAlias>$14: T.class_of(T).self_type()
    <blockReturnTemp>$10: T::Private::Methods::DeclBuilder = <self>: T::Private::Methods::DeclBuilder.returns(<statTemp>$12: Runtime object representing type: T.untyped)
    <blockReturnTemp>$15: T.noreturn = blockreturn<sig> <blockReturnTemp>$10: T::Private::Methods::DeclBuilder
    <unconditional> -> bb2

}

