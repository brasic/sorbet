method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$7: T.class_of(A) = alias <C A>
    keep_for_ide$6: T.class_of(A) = <cfgAlias>$7
    keep_for_ide$6: T.untyped = <keep-alive> keep_for_ide$6
    <magic>$20: T.class_of(<Magic>) = alias <C <Magic>>
    <exceptionValue>$9: T.untyped = <get-current-exception>
    <exceptionValue>$9 -> (T.untyped ? bb3 : bb4)

# backedges
# - bb6(rubyRegionId=3)
# - bb9(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb4(rubyRegionId=1)
bb3[rubyRegionId=2, firstDead=-1](<self>: T.class_of(<root>), <exceptionValue>$9: T.untyped, <magic>$20: T.class_of(<Magic>)):
    e: T.untyped = <exceptionValue>$9
    <cfgAlias>$23: T.class_of(StandardError) = alias <C StandardError>
    <isaCheckTemp>$24: T.untyped = e: T.untyped.is_a?(<cfgAlias>$23: T.class_of(StandardError))
    <isaCheckTemp>$24 -> (T.untyped ? bb7 : bb8)

# backedges
# - bb0(rubyRegionId=0)
bb4[rubyRegionId=1, firstDead=-1](<self>: T.class_of(<root>), <magic>$20: T.class_of(<Magic>)):
    <cfgAlias>$12: T.class_of(A) = alias <C A>
    <statTemp>$10: A = <cfgAlias>$12: T.class_of(A).new()
    <hashTemp>$14: Symbol(:z) = :z
    <hashTemp>$15: Integer(3) = 3
    <hashTemp>$16: Symbol(:w) = :w
    <hashTemp>$17: String("string") = "string"
    <magic>$18: T.class_of(<Magic>) = alias <C <Magic>>
    <statTemp>$13: {z: Integer(3), w: String("string")} = <magic>$18: T.class_of(<Magic>).<build-hash>(<hashTemp>$14: Symbol(:z), <hashTemp>$15: Integer(3), <hashTemp>$16: Symbol(:w), <hashTemp>$17: String("string"))
    <statTemp>$19: TrueClass = true
    <statTemp>$8: T.untyped = <statTemp>$10: A.f(<statTemp>$13: {z: Integer(3), w: String("string")}, <statTemp>$19: TrueClass)
    <exceptionValue>$9: T.untyped = <get-current-exception>
    <exceptionValue>$9 -> (T.untyped ? bb3 : bb5)

# backedges
# - bb4(rubyRegionId=1)
bb5[rubyRegionId=4, firstDead=-1](<self>: T.class_of(<root>)):
    <unconditional> -> bb6

# backedges
# - bb5(rubyRegionId=4)
# - bb7(rubyRegionId=2)
# - bb8(rubyRegionId=2)
bb6[rubyRegionId=3, firstDead=-1](<self>: T.class_of(<root>), <gotoDeadTemp>$27: T.nilable(TrueClass)):
    <statTemp>$30: String("done") = "done"
    <throwAwayTemp>$28: NilClass = <self>: T.class_of(<root>).p(<statTemp>$30: String("done"))
    <gotoDeadTemp>$27 -> (T.nilable(TrueClass) ? bb1 : bb9)

# backedges
# - bb3(rubyRegionId=2)
bb7[rubyRegionId=2, firstDead=-1](<self>: T.class_of(<root>), <magic>$20: T.class_of(<Magic>)):
    <exceptionValue>$9: NilClass = nil
    <keepForCfgTemp>$21: Sorbet::Private::Static::Void = <magic>$20: T.class_of(<Magic>).<keep-for-cfg>(<exceptionValue>$9: NilClass)
    <statTemp>$26: String("whoops") = "whoops"
    <statTemp>$8: NilClass = <self>: T.class_of(<root>).p(<statTemp>$26: String("whoops"))
    <unconditional> -> bb6

# backedges
# - bb3(rubyRegionId=2)
bb8[rubyRegionId=2, firstDead=-1](<self>: T.class_of(<root>)):
    <gotoDeadTemp>$27: TrueClass = true
    <unconditional> -> bb6

# backedges
# - bb6(rubyRegionId=3)
bb9[rubyRegionId=0, firstDead=1]():
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

}

method ::A#f {

bb0[rubyRegionId=0, firstDead=-1]():
    <self>: A = cast(<self>: NilClass, A);
    x: T.untyped = load_arg(x)
    y: T.untyped = load_arg(y)
    <block-pre-call-temp>$4: Sorbet::Private::Static::Void = x: T.untyped.map()
    <selfRestore>$5: A = <self>
    <unconditional> -> bb2

# backedges
# - bb3(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
# - bb5(rubyRegionId=1)
bb2[rubyRegionId=1, firstDead=-1](<self>: A, y: T.untyped, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: A):
    # outerLoops: 1
    <block-call> -> (NilClass ? bb5 : bb3)

# backedges
# - bb2(rubyRegionId=1)
bb3[rubyRegionId=0, firstDead=2](<block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: A):
    <returnMethodTemp>$2: T.untyped = Solve<<block-pre-call-temp>$4, map>
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb2(rubyRegionId=1)
bb5[rubyRegionId=1, firstDead=5](<self>: A, y: T.untyped, <block-pre-call-temp>$4: Sorbet::Private::Static::Void, <selfRestore>$5: A):
    # outerLoops: 1
    <self>: A = loadSelf(map)
    <blk>$6: T.untyped = load_yield_params(map)
    e$1: T.untyped = yield_load_arg(0, <blk>$6: T.untyped)
    <blockReturnTemp>$7: T.untyped = <self>: A.g(e$1: T.untyped, y: T.untyped)
    <blockReturnTemp>$11: T.noreturn = blockreturn<map> <blockReturnTemp>$7: T.untyped
    <unconditional> -> bb2

}

method ::A#g {

bb0[rubyRegionId=0, firstDead=10]():
    <self>: A = cast(<self>: NilClass, A);
    x: T.untyped = load_arg(x)
    y: T.untyped = load_arg(y)
    <cfgAlias>$5: T.class_of(String) = alias <C String>
    keep_for_ide$4: T.class_of(String) = <cfgAlias>$5
    keep_for_ide$4: T.untyped = <keep-alive> keep_for_ide$4
    <castTemp>$6: T.untyped = x
    <statTemp>$3: String = cast(<castTemp>$6: T.untyped, String);
    <returnMethodTemp>$2: String = <statTemp>$3: String.+(y: T.untyped)
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: String
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:A>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(A) = cast(<self>: NilClass, T.class_of(A));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

