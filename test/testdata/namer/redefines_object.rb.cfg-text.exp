method ::<Class:<root>>#<static-init> {

bb0[rubyRegionId=0, firstDead=20]():
    <self>: T.class_of(<root>) = cast(<self>: NilClass, T.class_of(<root>));
    <cfgAlias>$7: T.class_of(Object) = alias <C Object>
    keep_for_ide$6: T.class_of(Object) = <cfgAlias>$7
    keep_for_ide$6: T.untyped = <keep-alive> keep_for_ide$6
    <cfgAlias>$12: T.class_of(Trigger) = alias <C Trigger>
    keep_for_ide$11: T.class_of(Trigger) = <cfgAlias>$12
    keep_for_ide$11: T.untyped = <keep-alive> keep_for_ide$11
    <cfgAlias>$17: T.class_of(Foo) = alias <C Foo>
    keep_for_ide$16: T.class_of(Foo) = <cfgAlias>$17
    keep_for_ide$16: T.untyped = <keep-alive> keep_for_ide$16
    <cfgAlias>$20: T.class_of(Bar) = alias <C Bar>
    keep_for_ide$19: T.class_of(Bar) = <cfgAlias>$20
    keep_for_ide$19: T.untyped = <keep-alive> keep_for_ide$19
    <cfgAlias>$25: T.class_of(Bar) = alias <C Bar>
    keep_for_ide$24: T.class_of(Bar) = <cfgAlias>$25
    keep_for_ide$24: T.untyped = <keep-alive> keep_for_ide$24
    <cfgAlias>$28: T.class_of(Foo) = alias <C Foo>
    keep_for_ide$27: T.class_of(Foo) = <cfgAlias>$28
    keep_for_ide$27: T.untyped = <keep-alive> keep_for_ide$27
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Object>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(Object) = cast(<self>: NilClass, T.class_of(Object));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::Trigger#trigger {

bb0[rubyRegionId=0, firstDead=4]():
    @__fake_logger$3: T.untyped = alias <C <undeclared-field-stub>> (@__fake_logger)
    <self>: Trigger = cast(<self>: NilClass, Trigger);
    <returnMethodTemp>$2: T.untyped = @__fake_logger$3
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: T.untyped
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Trigger>#<static-init> {

bb0[rubyRegionId=0, firstDead=3]():
    <self>: T.class_of(Trigger) = cast(<self>: NilClass, T.class_of(Trigger));
    <returnMethodTemp>$2: Symbol(:trigger) = :trigger
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: Symbol(:trigger)
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Foo>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(Foo) = cast(<self>: NilClass, T.class_of(Foo));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

method ::<Class:Bar>#<static-init> {

bb0[rubyRegionId=0, firstDead=2]():
    <self>: T.class_of(Bar) = cast(<self>: NilClass, T.class_of(Bar));
    <finalReturn>: T.noreturn = return <returnMethodTemp>$2: NilClass
    <unconditional> -> bb1

# backedges
# - bb0(rubyRegionId=0)
bb1[rubyRegionId=0, firstDead=-1]():
    <unconditional> -> bb1

}

